{"file_path": "/Users/sz904/Desktop/11711/LTI_Neural_Navigator/data/2024-02-26/chunk_paper_txt/Yiming_Yang_Automatic_synchrotron_tomographic_alignment_schemes_based_on_genetic_algorithms_and_human-in-the-loop_software_chunk_4.txt", "num_qa_pairs": 10, "qa_list": [{"question": " What is the main component of the software framework design mentioned in the text?", "answer": " The GUI and the backend server.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " How do the GUI and backend server communicate with each other?", "answer": " Through the ZeroMQ protocol.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What are some factors that can affect the accuracy of sample alignment according to the text?", "answer": " Sample center calculations, movement errors, etc.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What is used in tomography beamlines to accomplish rotation-axis alignment?", "answer": " Calibration samples with sharp edges or gold particles.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What is the purpose of the coarse alignment procedure for sample alignment?", "answer": " To move the sample completely into the FoV for all projections when the sample is too far away from the CoR.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What was the offset reduced to in the x direction after the fine alignment of the walnut dataset in the text?", "answer": " 0.51 pixels.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " How many genes per individual were set in the genetic algorithm-based fine alignment in the text?", "answer": " 48 genes.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What are the two colors used to indicate different modules in the sample alignment software framework?", "answer": " Blue color for the sample alignment algorithm and its associated functional modules, and orange color for the GUI module.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " How long was needed for fine rotation-axis alignment for the individuals to be converged in the text?", "answer": " 42 seconds.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}, {"question": " What was the main result of applying the rotation-axis alignment algorithm to a simulated rotational model with a gold particle in the text?", "answer": " Reduction in the offset and transformation of the rotational trajectory.", "ref_chunk": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}], "doc_text": "values of the two motors as the gene and the sum of the difference between the center of the sample at 90(cid:3) and 270(cid:3) and the difference between the center of the sample at 0(cid:3) and 180(cid:3) as Figure 5 (a) The process of \ufb01ne sample alignment. (b) Framework design of the sample alignment software. The blue color indicates the sample alignment algorithm and its associated functional modules, and the orange color indicates the GUI module. 174 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes J. Synchrotron Rad. (2023). 30, 169\u2013178 \u00f05\u00de \u00f06\u00de research papers the \ufb01tness evaluation metric. After the initial population has evolved through selection, crossover and mutation, the indi- vidual eventually converges, and that individual is the optimal distance to move for sample precision alignment. To speed up the program, the images acquired from motor positions which have been generated in the previous generations will be reused in the new iteration. In practice, the current position is not exactly accurate due to sample center calculations, movement errors, etc. the rotation axis \ufb01nally converged to close to 0(cid:3). In theoretical terms, the rotation axis has been adjusted to an ideal position for subsequent sample alignment. In practice, the algorithm should be applicable for samples with arbitrary characteristic points such as gold particles, needle tips, etc. and the ef\ufb01ciency will also be limited by the accuracy of the motors and the pixel size of the detector. For a \ufb01ne rotation-axis alignment, only 42 s was needed for the individuals within the population to be converged if the acquisition time for the projection images is not accounted for. 2.4. User interaction design As shown in Figs. 5(a) and 5(b), the framework design of the software is mainly composed of two parts \u2013 the GUI and the backend server. Among them, the GUI has been devel- oped based on PyQt and provides a number of advanced interfaces that enable users to monitor the alignment status and de\ufb01ne parameters for the algorithms. The backend server integrates the coarse alignment module, the \ufb01ne alignment module and some basic motion control modules. The GUI and backend server communicate through the ZeroMQ protocol. 3. Results In a real scenario, the initial position of the gold particle can be very close to the rotation axis, which may raise potential dif\ufb01culty for the algorithm. Therefore, to verify the robustness of the algorithm, we initialized a series of gold particles at different positions and compared their alignment results, as demonstrated in Fig. S2 of the supporting information. The effect of the alignment of the rotation axis is gradually affected as the distance between the gold particle and the rotation axis decreases. When the initial position was ahead of [0, 6, 0], the distance between the gold particle and the rota- tion axis was about two pixels at this time, and the rotation axis could be better calibrated. The orthogonal tilt angles of the rotation axis \ufb01nally converged to close to 0(cid:3) after \ufb01ne alignment. 3.1. Rotation-axis alignment Currently, a large number of tomography beamlines rely on using calibration samples with sharp edges or gold particles to accomplish the rotation-axis alignment. Here we applied the rotation-axis alignment algorithm to a simulated rotational model with a gold particle. For demonstration, the rotation axis was initially de\ufb01ned as parallel to the vector with (cid:2)Zt set to be 14.01(cid:3) and (cid:2)Xt set to be 14.01(cid:3), and the initial coordinate of the gold particle was set to [150, 81, 138]. In addition, a random noise error was added to the rotation axis to more realistically simulate the movement of the gold particle. The results of the complete axis alignment are shown in Figs. 6(a), 6(b) and 6(c). In the initial state, there were signi\ufb01cant offsets in the movement trajectory of a gold particle at rotation angles of 0, 90, 180 and 270. After a coarse alignment of the rotation axis, a reduction in the offset was clearly observed at the four angles mentioned above. The rotational trajectory of the gold particle also transformed from a larger ellipse to a smaller ellipse with (cid:2)Zt reduced to 1.43(cid:3). Then, after a \ufb01ne alignment based on genetic algorithms, with the number of individuals within the population set at 20, with 48 genes per individual and 15 generations of evolution, both orthogonal tilt angles of 3.2. Sample alignment For the sample alignment, a coarse alignment procedure is necessary to move the sample completely into the FoV for all projections when the sample is too far away from the CoR. To test the coarse alignment module, we used the walnut dataset as the data source and set large offsets of the sample (159 and 104 pixels in the x and z directions, respectively) with respect to the CoR as the initial position. As shown in the projection images [Fig. 7(a) to 7(h)], the sample falls out of the FoV of the detector in certain projections. After the coarse alignment, it can be observed that the sample had been moved all the way into the imaging area of the detector. Until now there was still a two-pixels offset in the x direction and a three-pixels offset in the z direction for the following \ufb01ne alignment. With the number of individuals within the population set to be 20, the offset was reduced to 0.51 (x direction) and 0.73 (z direction) pixel after \ufb01ne alignment. The comparative results of the experiments are shown in Figs. 7(i) and 7( j). The time consumption of the \ufb01ne alignment was only 50 s when not considering the simulation time to generate the projection Figure 6 (a) Initial trajectory with tilted rotation axis. (b) Trajectory after coarse alignment. (c) Trajectory after \ufb01ne alignment. J. Synchrotron Rad. (2023). 30, 169\u2013178 Zhen Zhang et al. (cid:2) Automatic synchrotron tomographic alignment schemes 175 research papers Figure 7 (a)\u2013(d) Projection images of the sample before alignment. (e)\u2013(h) Projection images after coarse alignment. (i)\u2013( j) Sample offset in the x and z directions after each generation when the"}