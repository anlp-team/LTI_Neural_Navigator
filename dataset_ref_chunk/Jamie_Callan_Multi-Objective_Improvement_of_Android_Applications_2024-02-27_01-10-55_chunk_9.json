{"file_path": "/Users/sz904/Desktop/11711/LTI_Neural_Navigator/data/2024-02-26/chunk_paper_txt/Jamie_Callan_Multi-Objective_Improvement_of_Android_Applications_2024-02-27_01-10-55_chunk_9.txt", "num_qa_pairs": 10, "qa_list": [{"question": " Why were no improvements found to bandwidth?", "answer": " No improvements were found to bandwidth because only FDroid 2 uses bandwidth extensively according to the benchmarks.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " How many times did GIDroid find patches that contain edits semantically equivalent to developer patches?", "answer": " GIDroid found patches that contain edits semantically equivalent to developer patches 17 times.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " How many times was each MO run repeated in the experiments?", "answer": " Each MO run was repeated 20 times.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What was the best change found for the Port Authority application?", "answer": " The best change found for the Port Authority application consisted of removing an unnecessary try-catch statement.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What improvement was made for the F-Droid application?", "answer": " The improvement for F-Droid refactored an if/else statement to remove the null clause and only cancel the animation if the object is not null.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What did the best-evolved change in Tower Collector consist of?", "answer": " The best-evolved change in Tower Collector consisted of changes to the way in which a database is handled.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What was the best improving change in the Frozen Bubble application?", "answer": " The best improving change in the Frozen Bubble application consisted of modifying how new rows of bubbles were instantiated in a row.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What was the most improving change in the Fosdem Companion application?", "answer": " The most improving change in the Fosdem Companion application consisted of moving the instantiation of two objects outside of a loop.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What was the best change for the GadgetBridge application?", "answer": " The best change for the GadgetBridge application involved caching the method call which resolves the name of a file that is repeatedly used.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}, {"question": " What was the best-evolved mutation in the Lightning Browser application?", "answer": " The best-evolved mutation in the Lightning Browser application involved removing a check for whether or not a list of bookmarks is null.", "ref_chunk": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}], "doc_text": "Again no improvements were found to bandwidth. We believe this is due to the nature of our benchmarks, where only FDroid 2 uses bandwidth extensively. 2https://github.com/erikusaj/fdroidTvClient/commit/bf8aa30a576144524e83731a1bad20a1dab3f1bc 17 Table 3 No. of times GIDroid finds patches that contain edits semantically-equivalent to developer patches, providing at least the same % performance improvement (Rep.) and no. runs where an improvement was found (Imp.). Each MO run was repeated 20 times. Application Version Rep. NSGAII Imp. Rep. NSGAIII Imp. Rep. SPEA2 Imp. Port Authority 1 Port Authority 2 Port Authority 3 Port Authority 4 Port Authority 5 Port Authority 6 4 0 0 4 5 4 16 17 13 15 19 13 8 0 0 8 3 7 18 15 14 17 19 18 3 0 0 10 0 2 15 14 18 13 12 11 Tower Collector 1 Tower Collector 2 10 0 14 15 6 0 13 18 8 0 20 19 Gadgetbridge 1 0 15 0 12 0 13 Fosdem Companion 1 3 13 4 12 7 14 Fdroid 1 Fdroid 2 0 8 19 14 0 4 17 12 0 6 13 16 Lightning Browser 1 2 12 3 18 4 17 Frozen Bubble 1 13 15 12 16 12 18 We have compiled the best changes found by GIDroid in these experiments to demonstrate the capabilities of GIDroid. We detail each of these patches below: 3 7.2.1 Port-Authority (PAN) In the Port Authority application, our best change found consisted of removing an unnecessary try-catch statement, which resolved the IP address of a URL. It would not only attempt to resolve URLs, but also, redundantly, IP addresses. Furthermore, the resolved IP address is then passed to the constructor of the InetSocketAdress class, which already performs IP resolution, rendering the statement completely redundant. The error handling is also performed in the same way when the IP address is passed to the InetSocket. 7.2.2 F-Droid (FDN) The improvement for F-droid refactored an if/else statement. Before, the statement checked if an object was null or not, instantiating it if it were null, and canceling its animation if not. However, after this statement, the object was instantly re-initialised. Meaning that in the case where the object was null, it would be instantiated once and then instantiated immediately after. We refactor the statement to remove the null clause and only cancel the animation if the object is not null. 3These can be found in our repository (GIDroid (2023)) under \u2018bestPatch\u2019 in each of the applications in the \u2018Benchmark\u2019 folder. 18 Table 4 Normalised Hypervolumes of the Pareto fronts found by GIDroid across our experiments, by algorithm. Application Version NSGAII NSGAIII SPEA2 PortAuthority 1 (PA1) PortAuthority 2 (PA2) PortAuthority 3 (PA3) PortAuthority 4 (PA4) PortAuthority 5 (PA5) PortAuthority 6 (PA6) PortAuthority Current (PAN) 0.145 0.223 0.259 0.429 0.247 0.053 0.051 0.186 0.267 0.285 0.225 0.073 0.053 0.133 0.458 0.327 0.249 0.112 0.196 0.143 0.59 Tower Collector 1 (TC1) Tower Collector 2 (TC2) Tower Collector Current (TCN) 0.03 0.027 0.254 0.019 0.052 0.017 0.127 0.088 0.309 Gadgetbridge 1 (GB1) Gadgetbridge Current (GBN) 0.611 0.008 0.568 0.384 0.158 0.007 Fosdem Companion 1 (FS1) Fosdem Companion Curr. (FSN) 0.318 0.105 0.383 0.138 0.359 0.021 Fdroid 1 (FD1) Fdroid 2 (FD2) Fdroid Current (FDN) 0.016 0.022 0.206 0.206 0.042 0.065 0.012 0.525 0.233 Lightning Browser 1 (LB1) Lightning Browser Curr. (LBN) 0.322 0.038 0.159 0.037 0.028 0.039 Frozen Bubble 1 (FB1) Frozen Bubble Current (FBN) 0.097 0.024 0.094 0.024 0.076 0.026 7.2.3 Tower Collector (TCN) In the TowerCollector, the best-evolved change consisted of changes to the way in which a database is handled. It ensured that the connection to the database is closed when no longer needed and that the database is only instantiated when it is actually needed. This change reduces memory usage but slightly increases execution time due to an extra function call. 7.2.4 Frozen Bubble (FBN) In the Frozen Bubble application, the best improving change consisted of modifying how new rows of bubbles were instantiated in a row. We found that checking for -1 in the newly generated row was redundant as the row cannot contain a -1, it can only contain positive integers. We also found that the game pushed the sprite to the back of the board, but inspecting the application with and without this change shows no noticeable difference. 7.2.5 Fosdem-Companion (FSN) In the Fosdem application the most improving change consists of moving the instan- tiation of two objects outside of a loop. This means the same object can be reused in the loop, with the need for a new object to be assigned, thus saving both memory and execution time. 19 Fig. 5 Execution time improvements (%) achieved by GIDroid using three MO algorithms on 21 versions of 7 Android apps. 7.2.6 Gadget-Bridge (GBN) In the best change for the GadgetBridge Application we cache the method call which resolves the name of a file that is repeatedly used and removes the redundant rendering of a view that is already visible. 7.2.7 Lightning Browser (LBN) In Lightning Browser, the best-evolved mutation consists of removing a check for whether or not a list of bookmarks is null. The list is an argument decorated with @NonNull so should never be null, and in the case that is is there will be no errors. 7.3 RQ3: Multi-Objective Search In order to compare the different algorithms used in search, we consider the proce- dure proposed by Li et al (2020), for comparing different multi-objective algorithms in a search-based software engineering context. We choose to measure the hypervolume (HV) of the data, as it is considered to be a good indication of the general quality of the Pareto fronts produced and is considered appropriate when there is no preference between the different properties being improved. In order to measure the hypervolume we specify the reference points as the worst observation for all fitness measurements, for each objective, as done in previous work (Ji et al (2018); Liu et al (2021)). Due to different fitness scales, we normalise the values,"}