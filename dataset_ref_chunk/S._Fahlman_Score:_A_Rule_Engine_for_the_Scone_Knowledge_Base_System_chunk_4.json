{"file_path": "/Users/sz904/Desktop/11711/LTI_Neural_Navigator/data/2024-02-26/chunk_paper_txt/S._Fahlman_Score:_A_Rule_Engine_for_the_Scone_Knowledge_Base_System_chunk_4.txt", "num_qa_pairs": 10, "qa_list": [{"question": " What is the topmost element in the is-a hierarchy called?", "answer": " {thing}", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What are superiors above a given element in the is-a hierarchy called?", "answer": " Supertypes", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What is the purpose of cancel-links in Scone?", "answer": " To support reasoning with exceptions", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " How does Scone support inheritance?", "answer": " Through its is-a hierarchy", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What is the role of role nodes in Scone?", "answer": " They give rise to special links called has links", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What does Scone use to perform efficient inference and handle inheritance?", "answer": " Marker-passing system", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What does the virtual copy semantics in Scone involve?", "answer": " Copying roles through inheritance without actual copying", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What is the purpose of context-wire in Scone?", "answer": " To denote when the knowledge represented by an element exists or is valid", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What is the mechanism in Scone that handles different knowledge existing in different contexts?", "answer": " Multiple-context mechanism", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}, {"question": " What is the purpose of a special context marker in Scone?", "answer": " To activate a context", "ref_chunk": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}], "doc_text": "element to the A-wire element of is-a links which leads to more speci\ufb01c concepts. Elements above a given element in the is-a hierarchy are called its superiors, and elements below a given element are called its inferiors. Superiors that are type nodes are called supertypes, and inferiors that are type nodes are called subtypes. (All superiors are in fact supertypes because individual nodes cannot have any inferiors.) The topmost element in the is-a hierarchy is a type called {thing}: all other concepts are more speci\ufb01c than {thing}. 1.1.2 Multiple Inheritance and Marker Passing Scone supports multiple inheritance through its is-a hierarchy: each element can have any num- ber of incoming and outgoing is-a links. Inheritance allows Scone to infer many facts about the knowledge base that are not explicitly stated. For example, if the knowledge base contains knowledge that birds are feathered and that a chicken is a type of bird, the fact that a chicken is feathered is inherited from the bird type and can be inferred. Scone also has cancel-links to support reasoning with exceptions. For example, we can have in the knowledge base that {bird} is a subtype of {\ufb02ying thing}, since birds generally can \ufb02y, and that {penguin} is a subtype of {bird}. However, since penguins can\u2019t \ufb02y, we add a cancel-link from {penguin} to {\ufb02ying thing} to indicate that we do not want to inherit {\ufb02ying thing} from {bird}. Cancelling is a complex topic that can occasionally lead to knowledge ambiguities, and we do not deal with them extensively in the rule engine. Scone uses a marker-passing system to perform ef\ufb01cient inference and to handle inheritance and virtual copying [6]. Each node in Scone is equipped with a \ufb01xed set of marker bits that can be turned on and off. These markers can be conditionally turned on and off in parallel. For example, if a set of nodes is marked with some marker m, we can look at all is-a links in parallel and request for each one to mark the node attached to the B-wire with m if the node attached to the A-wire is marked with m. This operation takes all nodes marked with m and marks with m all 3 person animal John pet pet of John Fido Figure 1.2: Role nodes visualized for the knowledge \u201cFido is a pet of John.\u201d Here {pet of John} is a virtual copy of {pet} that {John} inherits from {person}. nodes one level above them in the is-a hierarchy. By repeating this operation until no new nodes are marked with m, we can quickly \ufb01nd all nodes above a speci\ufb01c node in the is-a hierarchy, and this procedure is called an upscan. There is a corresponding procedure called downscan where we mark all nodes below a speci\ufb01c node in the is-a hierarchy. 1.1.3 Roles and Virtual Copy Semantics Role nodes give rise to special links called has links. When a new role is declared for an owner, a new has link is also created with A-wire connected to the role node and B-wire connected to the owner node. This link signi\ufb01es that the owner type possesses some element of the role type. Any inferior of the role is called a player or a \ufb01ller, indicating that \u201cthe player is a role \ufb01ller of the owner.\u201d Scone implements virtual copy semantics to handle complex knowledge about roles in a consistent way [6]. When a new inferior of a type with several roles is created, the roles are virtually copied through inheritance. This means that the new inferior is treated as if it has a copy of each of the roles of its parent type, though no actual copying is done. For example, suppose a {pet} role is de\ufb01ned with owner {person}. This creates a has-link {people have pets}. An individual person {John} then inherits the has link and the {pet} role, creating a virtual copy {pet of John}. To say that an individual {Fido} is a pet of John, we then simply add an is-a link from {Fido} to {pet of John}. This is visualized in Figure 1.2, with solid arrows denoting is-a links and dashed arrows denoting has links. Scone also contains some marker operations related to role nodes and relations. For role nodes, there is a function that marks every node x such that x is a ROLE of OWNER for a speci\ufb01ed ROLE and OWNER, and a function that marks every node x such that PLAYER is a ROLE of x for a speci\ufb01ed ROLE and PLAYER. For relations, there are functions that marks every node x such that \u201cx RELATION B\u201d or \u201cB RELATION x\u201d is true when RELATION and 4 either A or B are speci\ufb01ed. Using these marker operations, we can ef\ufb01ciently answer a variety of queries about the knowledge base, such as if Clyde is an animal or if Clyde has any siblings. These marker passing operations will form the basis for checking if knowledge in Scone satis\ufb01es any production rules that can potentially \ufb01re. Virtual inheritance will also play a role in rule \u201ctrigger\u201d activation. 1.1.4 Multiple Contexts and Episodic Reasoning All knowledge in the Scone knowledge base exists under some context, which can be any Scone element. By default, all knowledge exists in a large context called {general}. Scone implements a multiple-context mechanism that can handle different knowledge existing in different contexts and switching between contexts. Each element in Scone has a context-wire connected to a context that denotes when the knowledge represented by that element exists or is valid. To activate a context, a special context marker is placed on the context element, then up- scanned to all supertypes of the context. This allows Scone to easily consider alternative \u201cuni- verses\u201d that are mostly the same as our universe but with some differences. For example, sup- pose we want to model knowledge about the Harry Potter universe. We can create a {Harry Potter universe} context that is a subtype of the {general} context. When activating the"}