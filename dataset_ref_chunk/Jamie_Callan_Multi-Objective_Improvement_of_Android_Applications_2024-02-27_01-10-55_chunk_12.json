{"file_path": "/Users/sz904/Desktop/11711/LTI_Neural_Navigator/data/2024-02-26/chunk_paper_txt/Jamie_Callan_Multi-Objective_Improvement_of_Android_Applications_2024-02-27_01-10-55_chunk_12.txt", "num_qa_pairs": 10, "qa_list": [{"question": " What is the name of the tool that was tested on 21 benchmarks targeting runtime, memory, and bandwidth use?", "answer": " GIDroid", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What improvements were found in the execution time when using GIDroid?", "answer": " Up to 35%", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " How much improvement was found in memory consumption when using GIDroid?", "answer": " Up to 65%", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What type of improvements could not be found by the approach used with GIDroid?", "answer": " Improvements to bandwidth", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What kind of programs do the techniques currently perform well on?", "answer": " Relatively small programs", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What percentage of known improvements did GIDroid re-discover?", "answer": " 64%", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " Where can all the code and results related to this work be found?", "answer": " In the repository GIDroid (2023)", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What license was applied to the Accepted Manuscript version for open access?", "answer": " Creative Commons Attribution (CC BY) license", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What grant supported the work mentioned in the text?", "answer": " EPSRC grant no. EP/P023991/1", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}, {"question": " What technique is mentioned for improving Android apps in the text?", "answer": " Search based testing technique", "ref_chunk": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}], "doc_text": "cache- based mutation operators. We have tested GIDroid on 21 benchmarks, targeting runtime, memory, and bandwidth use. We find improvements to the execution time of up to 35% and memory consumption of up to 65%. However, we find that for the benchmarks we used, our approach cannot find improvements to bandwidth, even though they are within GIDroid\u2019s search space. Future work could explore the capa- bilities of large language models for generating non-functional property-improving patches. Although the techniques currently only perform well on relatively small pro- grams (Madaan et al (2023)), trained on source code from programming competitions or puzzles which is short and self-contained (Puri et al (2021)). These examples do not contain the complex shared state and interaction with external components that are commonplace in Android apps. We asked ChatGPT4 to find improvements on our benchmark set with known improvements, but it failed to find any5, while GIDroid re-discovered 64% of those. 4https://openai.com/blog/chatgpt/ 5All responses are in our repo (GIDroid (2023)), in the \u2018Benchmark/ChatGPT\u2019 folder. 26 10 Statements and Declarations Data availability All our code and results are available in our repository GIDroid (2023). A permissive open source license will be added upon acceptance. Funding This work was supported by EPSRC grant no. EP/P023991/1. Copyright For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Accepted Manuscript version arising. References Amalfitano D, Amatucci N, Fasolino AR, et al (2015) Agrippin: a novel search based testing technique for Android applications. In: DeMobile@SIGSOFT FSE. ACM, pp 5\u201312 An G, Blot A, Petke J, et al (2019) Pyggi 2.0: Language independent genetic improvement framework. In: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, New York, NY, USA, ESEC/FSE 2019, pp 1100\u2013 1104, https://doi.org/10.1145/3338906.3341184, URL http://doi.acm.org/10.1145/ 3338906.3341184 Android Android Https://developer.android.com/reference/android/content/Context Development Team (2022a) Android Development Team (2022b) Android testing Https://developer.android.com/studio/test Android (2023a) Https://developer.android.com/studio/build Development Team Android compilation Android (2023b) Https://developer.android.com/studio/write/lint Development Team Android lint Auer M, Adler F, Fraser G (2022) Improving search-based Android test generation using surrogate models. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 51\u201366 Azim T, Neamtiu I (2013) Targeted and depth-first exploration for systematic testing of android apps. In: OOPSLA. ACM, pp 641\u2013660 Bach T, Andrzejak A, Pannemans R, et al (2017) The impact of coverage on bug density in a large industrial software project. In: ESEM. IEEE, pp 307\u2013313 Baek YM, Bae D (2016) Automated model-based Android GUI testing using multi- level GUI comparison criteria. In: ASE. ACM, pp 238\u2013249 27 context. guide. guide. tool. Basios M, Li L, Wu F, et al (2017) Optimising darwinian data structures on Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 10452. Springer, pp 161\u2013167 Baumann P, Santini S (2017) Every byte counts: Selective prefetching for mobile applications. Proc ACM Interact Mob Wearable Ubiquitous Technol 1(2):6:1\u20136:29 Berg F, Durr F, Rothermel K (2014) Increasing the efficiency and responsive- ness of mobile applications with preemptable code offloading. In: 2014 IEEE International Conference on Mobile Services (MS) \u02c6A. IEEE, Los Alamitos, CA, USA, pp 76\u201383, https://doi.org/10.1109/MobServ.2014.20, URL https://doi. ieeecomputersociety.org/10.1109/MobServ.2014.20 Blot A, Petke J (2021) Empirical comparison of search heuristics for genetic improve- ment of software. IEEE Trans Evol Comput 25(5):1001\u20131011. https://doi.org/10. 1109/TEVC.2021.3070271, URL https://doi.org/10.1109/TEVC.2021.3070271 Bokhari MA, Bruce BR, Alexander B, et al (2017) Deep parameter optimisation on Android smartphones for energy minimisation: a tale of woe and a proof-of-concept. In: GECCO (Companion). ACM, pp 1501\u20131508 Brownlee AEI, Petke J, Alexander B, et al (2019) Gin: genetic improvement research made easy. In: GECCO. ACM, pp 985\u2013993 Bruce BR, Petke J, Harman M (2015) Reducing energy consumption using genetic improvement. In: GECCO. ACM, pp 1327\u20131334 Burles N, Bowles E, Brownlee AEI, et al (2015) Object-oriented genetic improvement for improved energy consumption in Google Guava. In: SSBSE, Lecture Notes in Computer Science, vol 9275. Springer, pp 255\u2013261 Callan J, Petke J (2021) Improving Android app responsiveness through automated frame rate reduction. In: SSBSE, Lecture Notes in Computer Science, vol 12914. Springer, pp 136\u2013150 Callan J, Petke J (2022a) Improving responsiveness of Android activity navigation via genetic improvement. In: ICSE-Companion. ACM/IEEE, pp 356\u2013357 Callan J, Petke J (2022b) Multi-objective genetic improvement: A case study with EvoSuite. In: SSBSE, Lecture Notes in Computer Science, vol 13711. Springer, pp 111\u2013117 Callan J, Krauss O, Petke J, et al (2022) How do Android developers improve non- functional properties of software? Empir Softw Eng 27(5):113 28 Chun BG, Ihm S, Maniatis P, et al (2011) Clonecloud: Elastic execution between mobile device and cloud. In: Proceedings of the Sixth Conference on Computer Sys- tems. Association for Computing Machinery, New York, NY, USA, EuroSys \u201911, p 301\u2013314, https://doi.org/10.1145/1966445.1966473, URL https://doi.org/10.1145/ 1966445.1966473 Das PK, Shome S, Sarkar AK (2016) Apps: Accelerating performance and power saving in smartphones using code offload. In: 2016 IEEE 6th Internat. Conf. on Advanced Comput. (IACC), pp 759\u2013765, https://doi.org/10.1109/IACC.2016.145 Deb K, Jain H (2014) An evolutionary many-objective optimization algorithm using reference-point-based nondominated sorting approach, part I: solving problems with box constraints. IEEE Trans Evol Comput 18(4):577\u2013601 Deb K, Agrawal S, Pratap A, et al (2000) A fast elitist non-dominated sorting genetic algorithm for multi-objective optimisation: NSGA-II. In: PPSN, Lecture Notes in Computer Science, vol 1917. Springer, pp 849\u2013858 Ding AY, Bo Han, Yu Xiao, et al (2013) Enabling energy-aware collaborative mobile data offloading for smartphones. In: 2013 IEEE Internat. Conf. on Sensing, Commu- nications and Networking (SECON), pp 487\u2013495, https://doi.org/10.1109/SAHCN. 2013.6645020 FindBugs Development Team (2015) Findbugs lint tool. Https://findbugs.sourceforge.net/ GIDroid A https://github.com/SOLAR-group/GIDroid (2023) Tool for Multi-Objective GI in Android. Habchi S, Blanc X, Rouvoy R (2018) On adopting linters to deal with performance concerns in Android apps. In: Huchard M, K\u00a8astner C, Fraser G (eds) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. ACM, pp 6\u201316, https://doi. org/10.1145/3238147.3238197, URL https://doi.org/10.1145/3238147.3238197 Haraldsson SO, Woodward JR, Brownlee AEI, et al (2017) Fixing bugs in your sleep: how genetic improvement became an overnight success."}